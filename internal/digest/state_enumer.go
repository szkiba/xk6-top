// Code generated by "enumer -text -json -trimprefix State -type State"; DO NOT EDIT.

package digest

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StateName = "WaitingConnectedPreparingStartingDetachedRunningFinished"

var _StateIndex = [...]uint8{0, 7, 16, 25, 33, 41, 48, 56}

const _StateLowerName = "waitingconnectedpreparingstartingdetachedrunningfinished"

func (i State) String() string {
	if i < 0 || i >= State(len(_StateIndex)-1) {
		return fmt.Sprintf("State(%d)", i)
	}
	return _StateName[_StateIndex[i]:_StateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StateNoOp() {
	var x [1]struct{}
	_ = x[StateWaiting-(0)]
	_ = x[StateConnected-(1)]
	_ = x[StatePreparing-(2)]
	_ = x[StateStarting-(3)]
	_ = x[StateDetached-(4)]
	_ = x[StateRunning-(5)]
	_ = x[StateFinished-(6)]
}

var _StateValues = []State{StateWaiting, StateConnected, StatePreparing, StateStarting, StateDetached, StateRunning, StateFinished}

var _StateNameToValueMap = map[string]State{
	_StateName[0:7]:        StateWaiting,
	_StateLowerName[0:7]:   StateWaiting,
	_StateName[7:16]:       StateConnected,
	_StateLowerName[7:16]:  StateConnected,
	_StateName[16:25]:      StatePreparing,
	_StateLowerName[16:25]: StatePreparing,
	_StateName[25:33]:      StateStarting,
	_StateLowerName[25:33]: StateStarting,
	_StateName[33:41]:      StateDetached,
	_StateLowerName[33:41]: StateDetached,
	_StateName[41:48]:      StateRunning,
	_StateLowerName[41:48]: StateRunning,
	_StateName[48:56]:      StateFinished,
	_StateLowerName[48:56]: StateFinished,
}

var _StateNames = []string{
	_StateName[0:7],
	_StateName[7:16],
	_StateName[16:25],
	_StateName[25:33],
	_StateName[33:41],
	_StateName[41:48],
	_StateName[48:56],
}

// StateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateString(s string) (State, error) {
	if val, ok := _StateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to State values", s)
}

// StateValues returns all values of the enum
func StateValues() []State {
	return _StateValues
}

// StateStrings returns a slice of all String values of the enum
func StateStrings() []string {
	strs := make([]string, len(_StateNames))
	copy(strs, _StateNames)
	return strs
}

// IsAState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i State) IsAState() bool {
	for _, v := range _StateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for State
func (i State) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for State
func (i *State) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("State should be a string, got %s", data)
	}

	var err error
	*i, err = StateString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for State
func (i State) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for State
func (i *State) UnmarshalText(text []byte) error {
	var err error
	*i, err = StateString(string(text))
	return err
}
