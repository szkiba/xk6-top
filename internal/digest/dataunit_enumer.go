// Code generated by "enumer -text -transform lower -trimprefix dataUnit -type dataUnit"; DO NOT EDIT.

package digest

import (
	"fmt"
	"strings"
)

const (
	_dataUnitName_0      = "b"
	_dataUnitLowerName_0 = "b"
	_dataUnitName_1      = "kb"
	_dataUnitLowerName_1 = "kb"
	_dataUnitName_2      = "mb"
	_dataUnitLowerName_2 = "mb"
	_dataUnitName_3      = "gb"
	_dataUnitLowerName_3 = "gb"
	_dataUnitName_4      = "tb"
	_dataUnitLowerName_4 = "tb"
	_dataUnitName_5      = "pb"
	_dataUnitLowerName_5 = "pb"
	_dataUnitName_6      = "eb"
	_dataUnitLowerName_6 = "eb"
)

var (
	_dataUnitIndex_0 = [...]uint8{0, 1}
	_dataUnitIndex_1 = [...]uint8{0, 2}
	_dataUnitIndex_2 = [...]uint8{0, 2}
	_dataUnitIndex_3 = [...]uint8{0, 2}
	_dataUnitIndex_4 = [...]uint8{0, 2}
	_dataUnitIndex_5 = [...]uint8{0, 2}
	_dataUnitIndex_6 = [...]uint8{0, 2}
)

func (i dataUnit) String() string {
	switch {
	case i == 1:
		return _dataUnitName_0
	case i == 1000:
		return _dataUnitName_1
	case i == 1000000:
		return _dataUnitName_2
	case i == 1000000000:
		return _dataUnitName_3
	case i == 1000000000000:
		return _dataUnitName_4
	case i == 1000000000000000:
		return _dataUnitName_5
	case i == 1000000000000000000:
		return _dataUnitName_6
	default:
		return fmt.Sprintf("dataUnit(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _dataUnitNoOp() {
	var x [1]struct{}
	_ = x[dataUnitB-(1)]
	_ = x[dataUnitKB-(1000)]
	_ = x[dataUnitMB-(1000000)]
	_ = x[dataUnitGB-(1000000000)]
	_ = x[dataUnitTB-(1000000000000)]
	_ = x[dataUnitPB-(1000000000000000)]
	_ = x[dataUnitEB-(1000000000000000000)]
}

var _dataUnitValues = []dataUnit{dataUnitB, dataUnitKB, dataUnitMB, dataUnitGB, dataUnitTB, dataUnitPB, dataUnitEB}

var _dataUnitNameToValueMap = map[string]dataUnit{
	_dataUnitName_0[0:1]:      dataUnitB,
	_dataUnitLowerName_0[0:1]: dataUnitB,
	_dataUnitName_1[0:2]:      dataUnitKB,
	_dataUnitLowerName_1[0:2]: dataUnitKB,
	_dataUnitName_2[0:2]:      dataUnitMB,
	_dataUnitLowerName_2[0:2]: dataUnitMB,
	_dataUnitName_3[0:2]:      dataUnitGB,
	_dataUnitLowerName_3[0:2]: dataUnitGB,
	_dataUnitName_4[0:2]:      dataUnitTB,
	_dataUnitLowerName_4[0:2]: dataUnitTB,
	_dataUnitName_5[0:2]:      dataUnitPB,
	_dataUnitLowerName_5[0:2]: dataUnitPB,
	_dataUnitName_6[0:2]:      dataUnitEB,
	_dataUnitLowerName_6[0:2]: dataUnitEB,
}

var _dataUnitNames = []string{
	_dataUnitName_0[0:1],
	_dataUnitName_1[0:2],
	_dataUnitName_2[0:2],
	_dataUnitName_3[0:2],
	_dataUnitName_4[0:2],
	_dataUnitName_5[0:2],
	_dataUnitName_6[0:2],
}

// dataUnitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func dataUnitString(s string) (dataUnit, error) {
	if val, ok := _dataUnitNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _dataUnitNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to dataUnit values", s)
}

// dataUnitValues returns all values of the enum
func dataUnitValues() []dataUnit {
	return _dataUnitValues
}

// dataUnitStrings returns a slice of all String values of the enum
func dataUnitStrings() []string {
	strs := make([]string, len(_dataUnitNames))
	copy(strs, _dataUnitNames)
	return strs
}

// IsAdataUnit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i dataUnit) IsAdataUnit() bool {
	for _, v := range _dataUnitValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for dataUnit
func (i dataUnit) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for dataUnit
func (i *dataUnit) UnmarshalText(text []byte) error {
	var err error
	*i, err = dataUnitString(string(text))
	return err
}
