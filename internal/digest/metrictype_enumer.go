// Code generated by "enumer -text -json -transform lower -trimprefix MetricType -type MetricType"; DO NOT EDIT.

package digest

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MetricTypeName = "countergaugetrendrate"

var _MetricTypeIndex = [...]uint8{0, 7, 12, 17, 21}

const _MetricTypeLowerName = "countergaugetrendrate"

func (i MetricType) String() string {
	if i < 0 || i >= MetricType(len(_MetricTypeIndex)-1) {
		return fmt.Sprintf("MetricType(%d)", i)
	}
	return _MetricTypeName[_MetricTypeIndex[i]:_MetricTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MetricTypeNoOp() {
	var x [1]struct{}
	_ = x[MetricTypeCounter-(0)]
	_ = x[MetricTypeGauge-(1)]
	_ = x[MetricTypeTrend-(2)]
	_ = x[MetricTypeRate-(3)]
}

var _MetricTypeValues = []MetricType{MetricTypeCounter, MetricTypeGauge, MetricTypeTrend, MetricTypeRate}

var _MetricTypeNameToValueMap = map[string]MetricType{
	_MetricTypeName[0:7]:        MetricTypeCounter,
	_MetricTypeLowerName[0:7]:   MetricTypeCounter,
	_MetricTypeName[7:12]:       MetricTypeGauge,
	_MetricTypeLowerName[7:12]:  MetricTypeGauge,
	_MetricTypeName[12:17]:      MetricTypeTrend,
	_MetricTypeLowerName[12:17]: MetricTypeTrend,
	_MetricTypeName[17:21]:      MetricTypeRate,
	_MetricTypeLowerName[17:21]: MetricTypeRate,
}

var _MetricTypeNames = []string{
	_MetricTypeName[0:7],
	_MetricTypeName[7:12],
	_MetricTypeName[12:17],
	_MetricTypeName[17:21],
}

// MetricTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetricTypeString(s string) (MetricType, error) {
	if val, ok := _MetricTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MetricTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MetricType values", s)
}

// MetricTypeValues returns all values of the enum
func MetricTypeValues() []MetricType {
	return _MetricTypeValues
}

// MetricTypeStrings returns a slice of all String values of the enum
func MetricTypeStrings() []string {
	strs := make([]string, len(_MetricTypeNames))
	copy(strs, _MetricTypeNames)
	return strs
}

// IsAMetricType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MetricType) IsAMetricType() bool {
	for _, v := range _MetricTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MetricType
func (i MetricType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MetricType
func (i *MetricType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MetricType should be a string, got %s", data)
	}

	var err error
	*i, err = MetricTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MetricType
func (i MetricType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MetricType
func (i *MetricType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MetricTypeString(string(text))
	return err
}
