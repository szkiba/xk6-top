// Code generated by "enumer -text -json -transform lower -trimprefix EventType -type EventType"; DO NOT EDIT.

package digest

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EventTypeName = "configparammetricsnapshotcumulativestartstopconnectdisconnect"

var _EventTypeIndex = [...]uint8{0, 6, 11, 17, 25, 35, 40, 44, 51, 61}

const _EventTypeLowerName = "configparammetricsnapshotcumulativestartstopconnectdisconnect"

func (i EventType) String() string {
	if i < 0 || i >= EventType(len(_EventTypeIndex)-1) {
		return fmt.Sprintf("EventType(%d)", i)
	}
	return _EventTypeName[_EventTypeIndex[i]:_EventTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EventTypeNoOp() {
	var x [1]struct{}
	_ = x[EventTypeConfig-(0)]
	_ = x[EventTypeParam-(1)]
	_ = x[EventTypeMetric-(2)]
	_ = x[EventTypeSnapshot-(3)]
	_ = x[EventTypeCumulative-(4)]
	_ = x[EventTypeStart-(5)]
	_ = x[EventTypeStop-(6)]
	_ = x[EventTypeConnect-(7)]
	_ = x[EventTypeDisconnect-(8)]
}

var _EventTypeValues = []EventType{EventTypeConfig, EventTypeParam, EventTypeMetric, EventTypeSnapshot, EventTypeCumulative, EventTypeStart, EventTypeStop, EventTypeConnect, EventTypeDisconnect}

var _EventTypeNameToValueMap = map[string]EventType{
	_EventTypeName[0:6]:        EventTypeConfig,
	_EventTypeLowerName[0:6]:   EventTypeConfig,
	_EventTypeName[6:11]:       EventTypeParam,
	_EventTypeLowerName[6:11]:  EventTypeParam,
	_EventTypeName[11:17]:      EventTypeMetric,
	_EventTypeLowerName[11:17]: EventTypeMetric,
	_EventTypeName[17:25]:      EventTypeSnapshot,
	_EventTypeLowerName[17:25]: EventTypeSnapshot,
	_EventTypeName[25:35]:      EventTypeCumulative,
	_EventTypeLowerName[25:35]: EventTypeCumulative,
	_EventTypeName[35:40]:      EventTypeStart,
	_EventTypeLowerName[35:40]: EventTypeStart,
	_EventTypeName[40:44]:      EventTypeStop,
	_EventTypeLowerName[40:44]: EventTypeStop,
	_EventTypeName[44:51]:      EventTypeConnect,
	_EventTypeLowerName[44:51]: EventTypeConnect,
	_EventTypeName[51:61]:      EventTypeDisconnect,
	_EventTypeLowerName[51:61]: EventTypeDisconnect,
}

var _EventTypeNames = []string{
	_EventTypeName[0:6],
	_EventTypeName[6:11],
	_EventTypeName[11:17],
	_EventTypeName[17:25],
	_EventTypeName[25:35],
	_EventTypeName[35:40],
	_EventTypeName[40:44],
	_EventTypeName[44:51],
	_EventTypeName[51:61],
}

// EventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventTypeString(s string) (EventType, error) {
	if val, ok := _EventTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EventTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EventType values", s)
}

// EventTypeValues returns all values of the enum
func EventTypeValues() []EventType {
	return _EventTypeValues
}

// EventTypeStrings returns a slice of all String values of the enum
func EventTypeStrings() []string {
	strs := make([]string, len(_EventTypeNames))
	copy(strs, _EventTypeNames)
	return strs
}

// IsAEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EventType) IsAEventType() bool {
	for _, v := range _EventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EventType
func (i EventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventType
func (i *EventType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EventType should be a string, got %s", data)
	}

	var err error
	*i, err = EventTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for EventType
func (i EventType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EventType
func (i *EventType) UnmarshalText(text []byte) error {
	var err error
	*i, err = EventTypeString(string(text))
	return err
}
