// Code generated by "enumer -text -type Level"; DO NOT EDIT.

package digest

import (
	"fmt"
	"strings"
)

const _LevelName = "NoneInfoReadyNoticeWarningError"

var _LevelIndex = [...]uint8{0, 4, 8, 13, 19, 26, 31}

const _LevelLowerName = "noneinforeadynoticewarningerror"

func (i Level) String() string {
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LevelNoOp() {
	var x [1]struct{}
	_ = x[None-(0)]
	_ = x[Info-(1)]
	_ = x[Ready-(2)]
	_ = x[Notice-(3)]
	_ = x[Warning-(4)]
	_ = x[Error-(5)]
}

var _LevelValues = []Level{None, Info, Ready, Notice, Warning, Error}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:4]:        None,
	_LevelLowerName[0:4]:   None,
	_LevelName[4:8]:        Info,
	_LevelLowerName[4:8]:   Info,
	_LevelName[8:13]:       Ready,
	_LevelLowerName[8:13]:  Ready,
	_LevelName[13:19]:      Notice,
	_LevelLowerName[13:19]: Notice,
	_LevelName[19:26]:      Warning,
	_LevelLowerName[19:26]: Warning,
	_LevelName[26:31]:      Error,
	_LevelLowerName[26:31]: Error,
}

var _LevelNames = []string{
	_LevelName[0:4],
	_LevelName[4:8],
	_LevelName[8:13],
	_LevelName[13:19],
	_LevelName[19:26],
	_LevelName[26:31],
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// LevelStrings returns a slice of all String values of the enum
func LevelStrings() []string {
	strs := make([]string, len(_LevelNames))
	copy(strs, _LevelNames)
	return strs
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Level
func (i Level) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Level
func (i *Level) UnmarshalText(text []byte) error {
	var err error
	*i, err = LevelString(string(text))
	return err
}
